package com.atguigu.Day02

/**
 * 方法定义语法:
 *     def 方法名(参数名:参数类型,...):返回值类型 = {方法体}
 *  方法的调用: 方法名(参数值,..)
 *
 *  方法的简化原则:
 *      1、如果方法的返回值是{}最后一行表达式的结果值，那么方法的返回值类型可以省略
 *           如果方法体中带有return关键字，则必须定义返回值类型
 *      2、如果方法体只有一行语句，{}可以省略
 *      3、如果方法不需要参数,()可以省略
 *           如果定义方法的时候没有加上(),在调用方法的时候也不能加上()
 *           如果定义方法的时候加上(),在调用方法的时候可以加上()，也可以省略()
 *      4、如果方法不需要返回值，=可以省略【=、{}不能同时省略】
 *
 *
 */
object $01_MethodDefined {
  def main(args: Array[String]): Unit = {


    var result=add(2,3)
    println(result)
    println("去掉返回值类型")
    println(add1(2,3))
    println("去掉返回值类型和{}")
    println(add2(2,3))
    println("方法没有参数列表,省略()")
    // 声明方法的时候没有加(),那么调用的时候也不需要加()
    // 如果声明方法的时候加上了(),那么调用方法的时候可以加()也可以不加
    add3
    add4()
    println("方法没有返回值,那么可以省略=,但是=和{}不可以同时省略")
    add5
  }
  // 方法的定义格式: def 方法名(参数名:参数类型,...):返回值类型={方法体}
  def add(x:Int,y:Int):Int={
    x+y
  }
  // =======================方法的简化===============================
  // 1,如果方法的返回值是{}最后一行表达式的结果值,那么方法的返回值类型可以省略
  // 但是如果方法体中带有return关键字,则必须定义返回值类型
  def add1(x:Int,y:Int)={x+y}
  // 因为null0可以代替任何的AnyRef,所以需要指定返回值类型
  def getName(name:String,agr:String):String={
    if (name==null) return null
    agr
  }
  // 2 如果方法体中只有一段逻辑,也就是只有一行语句,方法体的{}可以省略
  def add2(x:Int,j:Int)=x+j
  // 3 如果方法没有参数列表,则()可以省略
  //    如果定义方法的时候没有加上(),在调用方法的时候也不能加上()
  //    如果定义方法的时候加上(),在调用方法的时候可以加上()，也可以省略()
  def add3=println(99)
  def add4()=println(2000)
  // 4,如果方法没有返回值,那么=可以省略,但是=和{}不可以同时省略
  def add5{println("good")}
}
