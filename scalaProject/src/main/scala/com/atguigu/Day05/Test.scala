package com.atguigu.Day05
import java.text.SimpleDateFormat

import scala.io.Source

object Test {
  /**
   * A	龙华区	宝安区	2020-07-15 10:05:10	2020-07-15 10:25:02
   * B	宝安区	福田区	2020-07-15 11:43:22	2020-07-15 11:55:45
   * A	龙岗区	宝安区	2020-07-15 11:55:55	2020-07-15 12:12:23
   * B	福田区	宝安区	2020-07-15 12:05:05	2020-07-15 12:22:33
   * A	龙岗区	龙华区	2020-07-15 11:02:08	2020-07-15 11:17:15
   * A	宝安区	龙岗区	2020-07-15 10:35:15	2020-07-15 10:40:50
   * B	龙华区	龙岗区	2020-07-15 10:45:25	2020-07-15 10:50:00
   * A	龙华区	龙岗区	2020-07-15 11:33:12	2020-07-15 11:45:35
   * B	宝安区	龙岗区	2020-07-15 12:27:20	2020-07-15 12:43:31
   * A	宝安区	龙岗区	2020-07-15 12:17:10	2020-07-15 12:33:21
   * B	福田区	龙华区	2020-07-15 10:15:21	2020-07-15 10:35:12
   * B	龙岗区	宝安区	2020-07-15 11:12:18	2020-07-15 11:27:25
   */
  def dateStrToLong(dateStr:String):Long = {
    val format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
    val date = format.parse(dateStr)
    date.getTime
  }
  def main(args: Array[String]): Unit = {

    //1、读数据
    val data = Source.fromFile("d:/wordcount.txt","utf-8").getLines().toList

    /**[
     * A	龙华区	宝安区	2020-07-15 10:05:10	2020-07-15 10:25:02,
     * B	宝安区	福田区	2020-07-15 11:43:22	2020-07-15 11:55:45,
     * A	龙岗区	宝安区	2020-07-15 11:55:55	2020-07-15 12:12:23,
     * B	福田区	宝安区	2020-07-15 12:05:05	2020-07-15 12:22:33,
     * A	龙岗区	龙华区	2020-07-15 11:02:08	2020-07-15 11:17:15,
     * A	宝安区	龙岗区	2020-07-15 10:35:15	2020-07-15 10:40:50,
     * B	龙华区	龙岗区	2020-07-15 10:45:25	2020-07-15 10:50:00,
     * A	龙华区	龙岗区	2020-07-15 11:33:12	2020-07-15 11:45:35,
     * B	宝安区	龙岗区	2020-07-15 12:27:20	2020-07-15 12:43:31,
     * A	宝安区	龙岗区	2020-07-15 12:17:10	2020-07-15 12:33:21,
     * B	福田区	龙华区	2020-07-15 10:15:21	2020-07-15 10:35:12,
     * B	龙岗区	宝安区	2020-07-15 11:12:18	2020-07-15 11:27:25
     * ]
     */
    //2、切割得到字段
    val splitData = data.map(line=>{
      val arr = line.split("\t")
      val id = arr(0)
      val fromAd = arr(1)
      val toAd = arr(2)
      val fromTime = dateStrToLong(arr(3))
      val toTime = dateStrToLong(arr(4))
      (id,fromAd,toAd,fromTime,toTime)
    })
    /**
     * [
     * (A,龙华区,宝安区,2020-07-15 10:05:10,2020-07-15 10:25:02),
     * (B,宝安区,福田区,2020-07-15 11:43:22,2020-07-15 11:55:45),
     * (A,龙岗区,宝安区,2020-07-15 11:55:55,2020-07-15 12:12:23),
     * (B,福田区,宝安区,2020-07-15 12:05:05,2020-07-15 12:22:33),
     * (A,龙岗区,龙华区,2020-07-15 11:02:08,2020-07-15 11:17:15),
     * (A,宝安区,龙岗区,2020-07-15 10:35:15,2020-07-15 10:40:50),
     * (B,龙华区,龙岗区,2020-07-15 10:45:25,2020-07-15 10:50:00),
     * (A,龙华区,龙岗区,2020-07-15 11:33:12,2020-07-15 11:45:35),
     * (B,宝安区,龙岗区,2020-07-15 12:27:20,2020-07-15 12:43:31),
     * (A,宝安区,龙岗区,2020-07-15 12:17:10,2020-07-15 12:33:21),
     * (B,福田区,龙华区,2020-07-15 10:15:21,2020-07-15 10:35:12),
     * (B,龙岗区,宝安区,2020-07-15 11:12:18,2020-07-15 11:27:25)
     * ]
     */
    //splitData.groupBy(x=>x._1)
    //3、按照司机进行分组
    val grouped = splitData.groupBy(_._1)
    //[
    //   A -> List( (A,龙华区,宝安区,2020-07-15 10:05:10,2020-07-15 10:25:02) ，  (A,龙岗区,宝安区,2020-07-15 11:55:55,2020-07-15 12:12:23), (A,龙岗区,龙华区,2020-07-15 11:02:08,2020-07-15 11:17:15) ，...)
    //   B -> List( (B,宝安区,福田区,2020-07-15 11:43:22,2020-07-15 11:55:45), (B,福田区,宝安区,2020-07-15 12:05:05,2020-07-15 12:22:33), ..)
    // ]

    //4、对每个司机的数据进行排序，升序
    val regionData = grouped.flatMap(x=>{
      //x=A -> List( (A,龙华区,宝安区,2020-07-15 10:05:10,2020-07-15 10:25:02) ，  (A,龙岗区,宝安区,2020-07-15 11:55:55,2020-07-15 12:12:23), (A,龙岗区,龙华区,2020-07-15 11:02:08,2020-07-15 11:17:15) ，...)
      val list = x._2
      //List( (A,龙华区,宝安区,2020-07-15 10:05:10,2020-07-15 10:25:02) ，  (A,龙岗区,宝安区,2020-07-15 11:55:55,2020-07-15 12:12:23), (A,龙岗区,龙华区,2020-07-15 11:02:08,2020-07-15 11:17:15) ，...)
      list.sortBy(y=>y._5)
        //List( (A,龙华区,宝安区,2020-07-15 10:05:10,2020-07-15 10:25:02) ， (A,龙岗区,龙华区,2020-07-15 11:02:08,2020-07-15 11:17:15) , (A,龙岗区,宝安区,2020-07-15 11:55:55,2020-07-15 12:12:23), ，...)
        .sliding(2)
        //List(List( (A,龙华区,宝安区,2020-07-15 10:05:10,2020-07-15 10:25:02) ， (A,龙岗区,龙华区,2020-07-15 11:02:08,2020-07-15 11:17:15)) ,List( (A,龙岗区,龙华区,2020-07-15 11:02:08,2020-07-15 11:17:15) , (A,龙岗区,宝安区,2020-07-15 11:55:55,2020-07-15 12:12:23))，..)
        .map(z=>{
          //5、统计司机的等客时间
          //z = List( (A,龙华区,宝安区,2020-07-15 10:05:10,2020-07-15 10:25:02) ， (A,龙岗区,龙华区,2020-07-15 11:02:08,2020-07-15 11:17:15))
          val lastFromTime = z.last._4
          val firstToTime = z.head._5
          val address = z.head._3
          (address,(lastFromTime-firstToTime)/1000)
        })
      //List( (宝安区，2020-07-15 11:02:08 - 2020-07-15 10:25:02) ,...)
    })
    //[ (宝安区,xx),(龙华区,yy),(福田区,xx),(宝安区,yy)]

    //6、按照地区进行分组
    regionData.groupBy(x=>x._1)
      //[
      //   宝安区 -> List( (宝安区,xx) ,(宝安区,xx) ..)
      //   龙华区 -> List( (龙华区,yy) ,(龙华区,xx) ..)
      //   ....
      // ]
      //7、统计地区的平均等客时间
      .map(x=>{
        //x = 宝安区 -> List( (宝安区,xx) ,(宝安区,xx) ..)
        val sumTime = x._2.map(y=>y._2).sum
        val num = x._2.size
        (x._1,sumTime/num/60)
      })
      //[
      //   宝安区 -> 111
      //   龙华区 -> 222
      // ]
      //8、结果展示
      .foreach(println(_))
  }
}
